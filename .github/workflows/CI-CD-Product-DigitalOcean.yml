name: Product DO Docker Image CI

#0
# Add secret
env:
  DOTNET_VERSION: '6'
  REGISTRY: "registry.digitalocean.com/new-premises-group"
  IMAGE_NAME: "product-service"

# 1
# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
    paths: 
    - Services/Product/**
    
  pull_request:
    branches: [ "main" ]
    paths: 
    - Services/Product/**
#2
jobs:

  build-image:
    environment: production
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
          images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
    # - name: Set up .NET Core
    #   uses: actions/setup-dotnet@v2
    #   with:
    #       dotnet-version: ${{ env.DOTNET_VERSION }}
    # - name: Restore dependencies
    #   run: dotnet restore
    # - name: Build
    #   run: dotnet build --no-restore
    # - name: Test
    #   run: dotnet test --no-build --verbosity normal
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
          context: ./Services/Product/IW
          file: ./Services/Product/IW/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 600
      
    - name: Remove all old images
      run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

    - name: Push image to DigitalOcean Container Registry
      run: docker push ${{ steps.meta.outputs.tags }}
